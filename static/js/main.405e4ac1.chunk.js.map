{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","quoteText","quoteAuthor","isLoading","changeLoadingState","setState","prevState","getNewQuote","a","fetch","proxyUrl","resp","json","data","componentDidMount","console","log","tweetQuote","tweetUrl","window","open","this","className","length","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8SAiFeA,G,kNA7EbC,MAAQ,CACNC,UAAW,GACXC,YAAa,GACbC,WAAW,G,EAObC,mBAAqB,WACnB,EAAKC,UAAS,SAAAC,GACZ,OAAO,2BACFA,GADL,IAEEH,WAAYG,EAAUH,gB,EAM5BI,Y,sBAAc,8BAAAC,EAAA,6DACZ,EAAKJ,qBAEY,8CACF,yEAJH,kBAMSK,MAAMC,qHANf,cAMJC,EANI,gBAOSA,EAAKC,OAPd,OAOJC,EAPI,OAQV,EAAKR,UAAS,SAACC,GACb,OAAO,2BACFA,GADL,IAEEL,UAAWY,EAAKZ,UAChBC,YAAaW,EAAKX,iBAItB,EAAKE,qBAhBK,kDAkBV,EAAKU,oBACLC,QAAQC,IAAR,MAnBU,0D,EAuBdC,WAAa,WAAO,IAAD,EACkB,EAAKjB,MAAhCC,EADS,EACTA,UAAWC,EADF,EACEA,YACbgB,EAAQ,gDAA4CjB,EAA5C,cAA2DC,GACzEiB,OAAOC,KAAKF,EAAU,W,kEAvCtBG,KAAKd,gB,+BA6CG,IAAD,EACuCc,KAAKrB,MAA3CC,EADD,EACCA,UAAWC,EADZ,EACYA,YAAaC,EADzB,EACyBA,UAChC,OACE,yBAAKmB,UAAU,QACXnB,GAAa,yBAAKmB,UAAU,mBAC5B,yBAAKA,UAAS,qBAAgBrB,EAAUsB,OAAS,KAAO,oBACtD,uBAAGD,UAAU,sBACb,8BAAOrB,IAET,yBAAKqB,UAAU,gBACb,8BAAOpB,IAET,yBAAKoB,UAAU,oBACb,4BAAQE,QAASH,KAAKJ,YACpB,uBAAGK,UAAU,oBAEf,4BAAQE,QAASH,KAAKd,aAAtB,eAGHJ,GAAa,yBAAKmB,UAAU,gB,GAxEnBG,cCSEC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.405e4ac1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    quoteText: \"\",\n    quoteAuthor: \"\",\n    isLoading: false,\n  }\n\n  componentDidMount() {\n    this.getNewQuote();\n  }\n\n  changeLoadingState = () => {\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        isLoading: !prevState.isLoading\n      }\n    })\n  }\n\n\n  getNewQuote = async () => {\n    this.changeLoadingState();\n\n    const proxyUrl = 'https://whispering-tor-04671.herokuapp.com/'; //fix CORS problem\n    const apiUrl = \"http://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=json\";\n    try {\n      const resp = await fetch(proxyUrl + apiUrl);\n      const data = await resp.json();\n      this.setState((prevState) => {\n        return {\n          ...prevState,\n          quoteText: data.quoteText,\n          quoteAuthor: data.quoteAuthor\n        }\n      })\n\n      this.changeLoadingState();\n    } catch (err) {\n      this.componentDidMount();\n      console.log(err);\n    }\n  }\n\n  tweetQuote = () => {\n    const { quoteText, quoteAuthor } = this.state;\n    const tweetUrl = `https://twitter.com/intent/tweet?text=${quoteText} - ${quoteAuthor}`;\n    window.open(tweetUrl, '_blank');\n  }\n\n\n\n\n  render() {\n    const { quoteText, quoteAuthor, isLoading } = this.state;\n    return (\n      <div className=\"App\">\n        {!isLoading && <div className=\"quote-container\">\n          <div className={`quote-text ${quoteText.length > 120 && \"quote-text-long\"}`}>\n            <i className=\"fas fa-quote-left\"></i>\n            <span>{quoteText}</span>\n          </div>\n          <div className=\"quote-author\">\n            <span>{quoteAuthor}</span>\n          </div>\n          <div className=\"button-container\">\n            <button onClick={this.tweetQuote}>\n              <i className=\"fab fa-twitter\"></i>\n            </button>\n            <button onClick={this.getNewQuote}>New Quote</button>\n          </div>\n        </div>}\n        {isLoading && <div className=\"loader\"></div>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}